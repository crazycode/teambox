- if defined?(task_list_with_tasks_counter) && task_list_with_tasks_counter.zero?
  - content_for :js_templates do
    = "document.observe(\"dom:loaded\", function() { Task.make_all_sortable() });"
- num_archived_tasks = task_list.tasks.archived.count
- tasks = assign_tasks(project,task_list,'all_with_archived')
- maybe_cache_task_list_panel(task_list, current_target) do
  .task_list_wrap{ :id => "#{task_list_id(:with_tasks,project,task_list)}", :class => "task_list_#{task_list.id}" }
    = render_task_list(project,task_list,current_target)
    - unless !task_list.editable?(current_user) && tasks.empty?
      .tasks_wrap
        .tasks{ :id => task_list_id(:the_tasks,project,task_list), :class => "#{ 'read_only' unless task_list_editable?(task_list,current_user,sub_action)}", :reorder_url => project_reorder_tasks_path(project, task_list) }
          = list_tasks(project,task_list,tasks,current_target)
          = content_tag "div", [t('tasks.link.show_archived_tasks', :count => num_archived_tasks), t('tasks.link.hide_archived_tasks', :count => num_archived_tasks)].join("##"), :class => "show_archived_tasks_link_texts", :style => "display:none"
          - unless num_archived_tasks.zero?
            = link_to t('tasks.link.show_archived_tasks', :count => num_archived_tasks), "#", :class => "show_archived_tasks_link", :texts_class => "show_archived_tasks_link_texts",  :show => 'all'
      - if task_list_editable?(task_list,current_user,sub_action)
        = task_link(project,task_list)
        = task_form(project,task_list,task_list.new_task(current_user))